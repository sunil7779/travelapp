{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SUNIL\\\\Desktop\\\\projectintern\\\\travel-app\\\\src\\\\pages\\\\AddItinerary.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { db } from '../firebase'; // Adjust the path according to your project structure\nimport { collection, getDocs } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddItinerary = () => {\n  _s();\n  const [itineraries, setItineraries] = useState([]);\n  const [loading, setLoading] = useState(true); // Step 1: Create loading state\n\n  useEffect(() => {\n    // Step 2: Fetch data from Firebase and update loading state\n    const fetchItineraries = async () => {\n      try {\n        const querySnapshot = await getDocs(collection(db, \"itineraries\"));\n        const itinerariesList = [];\n        querySnapshot.forEach(doc => {\n          itinerariesList.push(doc.data());\n        });\n        setItineraries(itinerariesList);\n        setLoading(false); // Data fetched, stop loading\n      } catch (error) {\n        console.error(\"Error fetching itineraries: \", error);\n        setLoading(false); // If there's an error, stop loading\n      }\n    };\n    fetchItineraries();\n  }, []); // Empty dependency array so it only runs on mount\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 12\n    }, this); // Step 3: Render loading indicator\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Your Itineraries\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: itineraries.map((itinerary, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: itinerary.name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(AddItinerary, \"pLwpqUAXTEnmT5WX7M1Td6wO09M=\");\n_c = AddItinerary;\nexport default AddItinerary;\nvar _c;\n$RefreshReg$(_c, \"AddItinerary\");","map":{"version":3,"names":["React","useState","useEffect","db","collection","getDocs","jsxDEV","_jsxDEV","AddItinerary","_s","itineraries","setItineraries","loading","setLoading","fetchItineraries","querySnapshot","itinerariesList","forEach","doc","push","data","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","itinerary","index","name","_c","$RefreshReg$"],"sources":["C:/Users/SUNIL/Desktop/projectintern/travel-app/src/pages/AddItinerary.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { db } from '../firebase';  // Adjust the path according to your project structure\r\nimport { collection, getDocs } from 'firebase/firestore';\r\n\r\nconst AddItinerary = () => {\r\n  const [itineraries, setItineraries] = useState([]);\r\n  const [loading, setLoading] = useState(true);  // Step 1: Create loading state\r\n\r\n  useEffect(() => {\r\n    // Step 2: Fetch data from Firebase and update loading state\r\n    const fetchItineraries = async () => {\r\n      try {\r\n        const querySnapshot = await getDocs(collection(db, \"itineraries\"));\r\n        const itinerariesList = [];\r\n        querySnapshot.forEach((doc) => {\r\n          itinerariesList.push(doc.data());\r\n        });\r\n        setItineraries(itinerariesList);\r\n        setLoading(false);  // Data fetched, stop loading\r\n      } catch (error) {\r\n        console.error(\"Error fetching itineraries: \", error);\r\n        setLoading(false);  // If there's an error, stop loading\r\n      }\r\n    };\r\n    \r\n    fetchItineraries();\r\n  }, []); // Empty dependency array so it only runs on mount\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;  // Step 3: Render loading indicator\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Your Itineraries</h1>\r\n      {/* Render your itineraries here */}\r\n      <ul>\r\n        {itineraries.map((itinerary, index) => (\r\n          <li key={index}>{itinerary.name}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddItinerary;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,EAAE,QAAQ,aAAa,CAAC,CAAE;AACnC,SAASC,UAAU,EAAEC,OAAO,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;;EAE/CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,aAAa,GAAG,MAAMV,OAAO,CAACD,UAAU,CAACD,EAAE,EAAE,aAAa,CAAC,CAAC;QAClE,MAAMa,eAAe,GAAG,EAAE;QAC1BD,aAAa,CAACE,OAAO,CAAEC,GAAG,IAAK;UAC7BF,eAAe,CAACG,IAAI,CAACD,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC;QACFT,cAAc,CAACK,eAAe,CAAC;QAC/BH,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;MACtB,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;QACpDR,UAAU,CAAC,KAAK,CAAC,CAAC,CAAE;MACtB;IACF,CAAC;IAEDC,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,IAAIF,OAAO,EAAE;IACX,oBAAOL,OAAA;MAAAgB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAE;EACjC;EAEA,oBACEpB,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEzBpB,OAAA;MAAAgB,QAAA,EACGb,WAAW,CAACkB,GAAG,CAAC,CAACC,SAAS,EAAEC,KAAK,kBAChCvB,OAAA;QAAAgB,QAAA,EAAiBM,SAAS,CAACE;MAAI,GAAtBD,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAsB,CACrC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAClB,EAAA,CAvCID,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAyClB,eAAeA,YAAY;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}